I need help updating the individual provider detail page.  I need to have two buttons in there for extracting provider data and a separate button for converting to facets.  And I need both those buttons to use the JavaScript to call the different endpoints.  Note that those different endpoints needed are in the upload provider routes, which is a separate routes structure as compared to the provider routes where this HTML page is being served from.  Can you show me the complete updated individual provider detail HTML page and the complete updated individual provider detail JavaScript page?  So that these functions are properly called.  And also I want to place those buttons right above the associated medical groups listing.  So have a grouping of data extraction functions right above the associated medical groups so that I can easily access that data.

### FILE TREE (SELECTED)

├─ providers
|  ├─ static
|  |  └─ individual_providers_detail.js (63 lines)
|  └─ templates
|     ├─ individual_provider_detail.html (223 lines)
|     ├─ hospital_detail.html (91 lines)
|     ├─ individual_providers.html (46 lines)
|     ├─ hospitals.html (38 lines)
|     ├─ medical_groups.html (36 lines)
|     ├─ header.html (35 lines)
|     └─ networks.html (28 lines)
|  ├─ providers_routes.py (77 lines)
├─ upload_provider
|  ├─ static
|  |  └─ upload_provider.js (76 lines)
|  ├─ templates
|  |  └─ upload_provider.html (61 lines)
|  ├─ upload_provider_routes.py (95 lines)
|  ├─ image_to_markdown_gpt.py (79 lines)
|  ├─ create_individual_provider_from_image.py (45 lines)
├─ main.py (80 lines)
├─ .replit (17 lines)


### FILE CONTENTS

FILE: providers/static/individual_providers_detail.js
----------------------------------------

// Wait for DOM to be ready
document.addEventListener('DOMContentLoaded', function() {
  // Get buttons by ID
  const extractButton = document.getElementById('extractProviderInfoBtn');
  const convertButton = document.getElementById('convertToFacetsBtn');
  
  // Get provider ID from the form
  const providerForm = document.getElementById('providerForm');
  const formAction = providerForm.getAttribute('action');
  const providerId = formAction.split('/').pop().split('?')[0];
  
  if (extractButton) {
    extractButton.addEventListener('click', async function() {
      try {
        const response = await fetch(`/upload/extract_provider_info/${providerId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        
        if (data.success) {
          alert('Provider information extracted successfully');
          window.location.reload();
        } else {
          throw new Error(data.error || 'Failed to extract provider information');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error extracting provider information: ' + error.message);
      }
    });
  }

  if (convertButton) {
    convertButton.addEventListener('click', async function() {
      try {
        const response = await fetch(`/upload/convert_to_facets/${providerId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        
        if (data.success) {
          alert('Provider converted to Facets successfully');
          window.location.reload();
        } else {
          throw new Error(data.error || 'Failed to convert provider to Facets');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error converting to Facets: ' + error.message);
      }
    });
  }
});


FILE: providers/templates/individual_provider_detail.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8" style="padding-left: 20px; padding-right: 20px;">
    <div class="bg-white rounded-lg shadow p-6 max-w-5xl mx-auto">
        <form id="providerForm" method="POST" action="{{ url_for('providers.update_provider', provider_id=provider.provider_id) }}">
            <!-- Header Section -->
            <div class="border-b pb-4 mb-6">
                <p class="text-sm text-blue-600 mb-1">Individual Provider Record</p>
                <div class="flex justify-between items-center">
                    <h1 class="text-3xl font-bold">{{ provider.first_name }} {{ provider.last_name }}</h1>
                    <div>
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">💾 Save</button>
                    </div>
                </div>
                <input type="text" name="provider_type" value="{{ provider.provider_type }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
            </div>

            <div class="grid grid-cols-3 gap-6">
                <!-- Individual Provider Information -->
                <div class="col-span-3 sm:col-span-1">
                    <h2 class="text-lg font-semibold mb-4 text-gray-700">Individual Provider Information</h2>
                    <div class="space-y-3">
                        <div>
                            <label class="text-gray-600 text-sm">NPI</label>
                            <input type="text" name="npi" value="{{ provider.npi }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">First Name</label>
                            <input type="text" name="first_name" value="{{ provider.first_name }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Last Name</label>
                            <input type="text" name="last_name" value="{{ provider.last_name }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Gender</label>
                            <input type="text" name="gender" value="{{ provider.gender }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Accepting New Patients</label>
                            <select name="accepting_new_patients" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                                <option value="true" {% if provider.accepting_new_patients %}selected{% endif %}>Yes</option>
                                <option value="false" {% if not provider.accepting_new_patients %}selected{% endif %}>No</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Professional Details -->
                <div class="col-span-3 sm:col-span-1">
                    <h2 class="text-lg font-semibold mb-4 text-gray-700">Professional Details</h2>
                    <div class="space-y-3">
                        <div>
                            <label class="text-gray-600 text-sm">Specialties</label>
                            <input type="text" name="specialties" value="{{ provider.specialties }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Board Certifications</label>
                            <input type="text" name="board_certifications" value="{{ provider.board_certifications }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Languages</label>
                            <input type="text" name="languages" value="{{ provider.languages }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                    </div>
                </div>

                <!-- Contact Information -->
                <div class="col-span-3 sm:col-span-1">
                    <h2 class="text-lg font-semibold mb-4 text-gray-700">Contact Information</h2>
                    <div class="space-y-3">
                        <div>
                            <label class="text-gray-600 text-sm">Phone</label>
                            <input type="text" name="phone" value="{{ provider.phone }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Address</label>
                            <input type="text" name="address_line" value="{{ provider.address_line }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">City</label>
                            <input type="text" name="city" value="{{ provider.city }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">State</label>
                            <input type="text" name="state" value="{{ provider.state }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">ZIP</label>
                            <input type="text" name="zip" value="{{ provider.zip }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                    </div>
                </div>

                <!-- Provider Form Data -->
                <div class="col-span-3">
                    <h2 class="text-lg font-semibold mb-4 text-gray-700">Provider Form Data</h2>
                    <div class="space-y-3">
                        <div>
                            <label class="text-gray-600 text-sm">Enrollment Form Markdown</label>
                            <textarea name="provider_enrollment_form_markdown_text" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">{{ provider.provider_enrollment_form_markdown_text or '' }}</textarea>
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Enrollment Form JSON</label>
                            <textarea name="provider_enrollment_form_json" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm font-mono">{{ provider.provider_enrollment_form_json }}</textarea>
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Provider Facets Tables</label>
                            <textarea name="provider_facets_tables" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm font-mono">{{ provider.provider_facets_tables }}</textarea>
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">Provider Facets Markdown</label>
                            <textarea name="provider_facets_markdown" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">{{ provider.provider_facets_markdown or '' }}</textarea>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <!-- Medical Groups Table -->
        <div class="mt-8 pt-4 border-t">
            <h2 class="text-lg font-semibold mb-4 text-gray-700">Associated Medical Groups</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full table-auto">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">City</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">State</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ZIP</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% if medical_groups %}
                            {% for group in medical_groups %}
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ group.name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ group.address_line }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ group.city }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ group.state }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ group.zip }}</td>
                            </tr>
                            {% endfor %}
                        {% else %}
                            <tr>
                                <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">No associated medical groups found</td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Audit Log Table -->
        <div class="mt-8 pt-4 border-t">
            <h2 class="text-lg font-semibold mb-4 text-gray-700">Audit History</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full table-auto">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time (UTC)</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Field Updated</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Old Value</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">New Value</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% if provider.audits %}
                            {% for audit in provider.audits|sort(attribute='edit_time', reverse=True) %}
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <span class="utc-time" data-utc="{{ audit.edit_time.strftime('%Y-%m-%d %H:%M:%S') }}">
                                        {{ audit.edit_time.strftime('%Y-%m-%d %H:%M:%S') }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ audit.field_updated }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ audit.old_value or '' }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ audit.new_value or '' }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ audit.change_description or '' }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ audit.user.email if audit.user else 'Unknown' }}</td>
                            </tr>
                            {% endfor %}
                        {% else %}
                            <tr>
                                <td colspan="6" class="px-6 py-4 text-center text-sm text-gray-500">No audit records found</td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script src="{{ url_for('providers.static', filename='individual_providers_detail.js') }}" defer></script>
{% endblock %}


        </form>

        <!-- Data Partitioning Actions -->
        <div class="mt-8 pt-4 border-t">
            <h2 class="text-lg font-semibold mb-4 text-gray-700">Data Partitioning Actions</h2>
            <div class="flex space-x-4">
                <button type="button" 
                        class="bg-purple-600 text-white px-6 py-3 rounded hover:bg-purple-700 flex items-center"
                        id="extractProviderInfoBtn">
                    <span class="mr-2">✨</span> Extract Provider Info
                </button>
                <button type="button"
                        class="bg-purple-600 text-white px-6 py-3 rounded hover:bg-purple-700 flex items-center"
                        id="convertToFacetsBtn">
                    <span class="mr-2">🔄</span> Convert to Facets
                </button>
            </div>
        </div>



FILE: providers/templates/hospital_detail.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8" style="padding-left: 20px; padding-right: 20px;">
    <div class="bg-white rounded-lg shadow p-6 max-w-5xl mx-auto">
        <form id="hospitalForm" method="POST" action="{{ url_for('providers.update_hospital', hospital_id=hospital.hospital_id) }}">
            <!-- Header Section -->
            <div class="border-b pb-4 mb-6">
                <p class="text-sm text-blue-600 mb-1">Hospital Record</p>
                <div class="flex justify-between items-center">
                    <h1 class="text-3xl font-bold">{{ hospital.name }}</h1>
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">💾 Save</button>
                </div>
            </div>

            <div class="grid grid-cols-2 gap-6">
                <!-- Hospital Information -->
                <div class="col-span-2 sm:col-span-1">
                    <h2 class="text-lg font-semibold mb-4 text-gray-700">Hospital Information</h2>
                    <div class="space-y-3">
                        <div>
                            <label class="text-gray-600 text-sm">Name</label>
                            <input type="text" name="name" value="{{ hospital.name }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">CCN</label>
                            <input type="text" name="ccn" value="{{ hospital.ccn }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                    </div>
                </div>

                <!-- Contact Information -->
                <div class="col-span-2 sm:col-span-1">
                    <h2 class="text-lg font-semibold mb-4 text-gray-700">Contact Information</h2>
                    <div class="space-y-3">
                        <div>
                            <label class="text-gray-600 text-sm">Address</label>
                            <input type="text" name="address_line" value="{{ hospital.address_line }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">City</label>
                            <input type="text" name="city" value="{{ hospital.city }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">State</label>
                            <input type="text" name="state" value="{{ hospital.state }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="text-gray-600 text-sm">ZIP</label>
                            <input type="text" name="zip" value="{{ hospital.zip }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <!-- Networks Section -->
        <div class="mt-8 pt-4 border-t">
            <h2 class="text-lg font-semibold mb-4 text-gray-700">Network Affiliations</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Network Code</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Network Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Effective Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% for network, rel in networks %}
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ network.code }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ network.name }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ rel.effective_date }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ rel.status }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>

        <div class="mt-8 pt-4 border-t">
            <a href="{{ url_for('providers.hospitals') }}" class="text-blue-600 hover:text-blue-800">← Back to Hospital List</a>
        </div>
    </div>
</div>
{% endblock %}


FILE: providers/templates/individual_providers.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8" style="padding-left: 20px; padding-right: 20px;">
    <div class="w-full overflow-x-auto bg-white rounded-lg shadow">
        <table class="min-w-full table-auto">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">NPI</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gender</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Provider Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Accepting Patients</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Specialties</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Board Certifications</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Languages</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for provider in providers %}
                <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">
                        <a href="{{ url_for('providers.provider_detail', provider_id=provider.provider_id) }}" class="hover:underline">
                            {{ provider.first_name }} {{ provider.last_name }}
                        </a>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.npi }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.gender }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.phone }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.provider_type }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ 'Yes' if provider.accepting_new_patients else 'No' }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.specialties }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.board_certifications }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.languages }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ provider.address_line }}<br>{{ provider.city }}, {{ provider.state }} {{ provider.zip }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}


FILE: providers/templates/hospitals.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8" style="padding-left: 20px; padding-right: 20px;">
    <div class="w-full overflow-x-auto bg-white rounded-lg shadow">
        <table class="min-w-full table-auto">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hospital ID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CCN</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">City</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">State</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ZIP</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for hospital in hospitals %}
                <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ hospital.hospital_id }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">
                        <a href="{{ url_for('providers.hospital_detail', hospital_id=hospital.hospital_id) }}" class="hover:underline">{{ hospital.name }}</a>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ hospital.ccn }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ hospital.address_line }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ hospital.city }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ hospital.state }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ hospital.zip }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}


FILE: providers/templates/medical_groups.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8" style="padding-left: 20px; padding-right: 20px;">
    <div class="w-full overflow-x-auto bg-white rounded-lg shadow">
        <table class="min-w-full table-auto">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Group ID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tax ID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">City</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">State</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ZIP</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for group in medical_groups %}
                <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ group.group_id }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">{{ group.name }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ group.tax_id }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ group.address_line }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ group.city }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ group.state }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ group.zip }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}


FILE: providers/templates/header.html
----------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <title>BCI Providers</title>
</head>
<body>
    <header class="bg-blue-900 py-4 shadow-lg" style="padding-left: 20px; padding-right: 20px;">
        <div class="flex justify-between items-center">
            <h1 class="text-white font-bold text-2xl">BCI Providers</h1>
            <nav class="flex items-center space-x-8">
                <div class="flex space-x-6">
                    <a href="{{ url_for('providers.providers') }}" class="text-white hover:text-blue-200">👩‍⚕️ Ind Prov</a>
                    <a href="{{ url_for('providers.medical_groups') }}" class="text-white hover:text-blue-200">👥 Med Grp</a>
                    <a href="{{ url_for('providers.hospitals') }}" class="text-white hover:text-blue-200">🏥 Hosp</a>
                    <a href="{{ url_for('providers.networks') }}" class="text-white hover:text-blue-200">🌐 Ntwk</a>
                </div>
                <div class="border-l border-white-200 h-6"></div>
                <a href="{{ url_for('work_queue.work_queue') }}" class="text-white hover:text-blue-200">⚠️ Queue</a>
                <a href="{{ url_for('upload_provider.upload') }}" class="text-white hover:text-blue-200">📨 Upload</a>
                {% if current_user.is_authenticated %}
                    <a href="{{ url_for('auth.logout') }}" class="bg-blue-800 hover:bg-blue-700 text-white px-4 py-2 rounded">👤 Logout</a>
                {% else %}
                    <a href="{{ url_for('auth.login') }}" class="bg-blue-800 hover:bg-blue-700 text-white px-4 py-2 rounded">👤 Login</a>
                {% endif %}
            </nav>
        </div>
    </header>
    {% block content %}{% endblock %}
</body>
</html>


FILE: providers/templates/networks.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8" style="padding-left: 20px; padding-right: 20px;">
    <div class="w-full overflow-x-auto bg-white rounded-lg shadow">
        <table class="min-w-full table-auto">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Network ID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Code</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for network in networks %}
                <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ network.network_id }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">{{ network.code }}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ network.name }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}


FILE: providers/providers_routes.py
----------------------------------------
from flask import Blueprint, render_template, abort, request, redirect, url_for, flash, current_app
from main import db
from models import IndividualProvider, MedicalGroup, Hospital, Network, ProviderGroup, HospitalNetwork


providers_bp = Blueprint('providers', __name__, 
                        template_folder='templates',
                        static_folder='static',
                        static_url_path='/providers/static')

@providers_bp.route('/individual_providers/<int:provider_id>')
def provider_detail(provider_id):
    provider = db.session.query(IndividualProvider).get(provider_id)
    if provider is None:
        abort(404)

    medical_groups = db.session.query(MedicalGroup)\
        .join(ProviderGroup, ProviderGroup.group_id == MedicalGroup.group_id)\
        .filter(ProviderGroup.provider_id == provider_id)\
        .all()

    return render_template('individual_provider_detail.html', provider=provider, medical_groups=medical_groups)

@providers_bp.route('/individual_providers/<int:provider_id>/update', methods=['POST'])
def update_provider(provider_id):
    from providers.individual_provider_update import update_individual_provider
    return update_individual_provider(provider_id)

@providers_bp.route('/medical_groups')
def medical_groups():
    groups = db.session.query(MedicalGroup).order_by(MedicalGroup.group_id).all()
    return render_template('medical_groups.html', medical_groups=groups)

@providers_bp.route('/individual_providers')
def providers():
    providers = db.session.query(IndividualProvider).all()
    return render_template('individual_providers.html', providers=providers)

@providers_bp.route('/networks')
def networks():
    networks = db.session.query(Network).order_by(Network.network_id).all()
    return render_template('networks.html', networks=networks)

@providers_bp.route('/hospitals')
def hospitals():
    hospitals = db.session.query(Hospital).order_by(Hospital.hospital_id).all()
    return render_template('hospitals.html', hospitals=hospitals)

@providers_bp.route('/hospitals/<int:hospital_id>')
def hospital_detail(hospital_id):
    hospital = db.session.query(Hospital).get(hospital_id)
    if hospital is None:
        abort(404)
    
    networks = db.session.query(Network, HospitalNetwork)\
        .join(HospitalNetwork, Network.network_id == HospitalNetwork.network_id)\
        .filter(HospitalNetwork.hospital_id == hospital_id)\
        .all()
        
    return render_template('hospital_detail.html', hospital=hospital, networks=networks)

@providers_bp.route('/hospitals/<int:hospital_id>/update', methods=['POST'])
def update_hospital(hospital_id):
    hospital = db.session.query(Hospital).get(hospital_id)
    if hospital is None:
        abort(404)
        
    hospital.name = request.form.get('name')
    hospital.ccn = request.form.get('ccn')
    hospital.address_line = request.form.get('address_line')
    hospital.city = request.form.get('city')
    hospital.state = request.form.get('state')
    hospital.zip = request.form.get('zip')
    
    db.session.commit()
    flash('Hospital updated successfully', 'success')
    return redirect(url_for('providers.hospital_detail', hospital_id=hospital_id))

FILE: upload_provider/static/upload_provider.js
----------------------------------------

document.addEventListener('DOMContentLoaded', function() {
  const uploadForm = document.getElementById('uploadForm');
  const processingStatus = document.getElementById('processingStatus');
  const extractionResults = document.getElementById('extractionResults');
  const markdownContent = document.getElementById('markdownContent');
  let processingTimer;
  let processingSeconds = 0;

  uploadForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Show processing status and start timer
    processingStatus.classList.remove('hidden');
    extractionResults.classList.add('hidden');
    processingSeconds = 0;
    
    const statusText = processingStatus.querySelector('p');
    processingTimer = setInterval(() => {
      processingSeconds++;
      statusText.textContent = `Processing image... (${processingSeconds} second${processingSeconds !== 1 ? 's' : ''})`;
    }, 1000);
    
    try {
      // First process the image
      const formData = new FormData(uploadForm);
      const response = await fetch(uploadForm.action, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) throw new Error('Image processing failed');
      
      const { markdown } = await response.json();
      
      // Show extraction results
      markdownContent.innerHTML = marked.parse(markdown);
      extractionResults.classList.remove('hidden');
      
      // Create provider record with both markdown and image
      const createProviderUrl = uploadForm.dataset.createProviderUrl;
      // Create new FormData for provider creation
      const providerFormData = new FormData();
      providerFormData.append('markdown_text', markdown);
      providerFormData.append('image_file', document.querySelector('input[name="image_file"]').files[0]);
      
      const providerResponse = await fetch(createProviderUrl, {
        method: 'POST',
        body: providerFormData
      });
      
      if (!providerResponse.ok) {
        const errorData = await providerResponse.text();
        console.error('Provider creation failed:', errorData);
        throw new Error(`Provider creation failed: ${errorData}`);
      }
      
      const { provider_id } = await providerResponse.json();
      
      // Wait 5 seconds then redirect
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Redirect to provider detail page
      const detailUrl = uploadForm.dataset.providerDetailUrl.replace('/0', `/${provider_id}`);
      window.location.href = detailUrl;
      
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while processing the request');
    } finally {
      clearInterval(processingTimer);
      processingStatus.classList.add('hidden');
    }
  });
});


FILE: upload_provider/templates/upload_provider.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="{{ url_for('upload_provider.static', filename='upload_provider.js') }}"></script>
<div class="py-8 px-6">
  <div class="bg-white shadow rounded-lg p-6 max-w-4xl mx-auto">
    <h1 class="text-2xl font-bold mb-6">Upload Provider Image</h1>

    <!-- Upload form -->
    <form id="uploadForm" 
          action="{{ url_for('upload_provider.process_image') }}"
          method="post"
          enctype="multipart/form-data"
          data-create-provider-url="{{ url_for('upload_provider.create_provider') }}"
          data-provider-detail-url="{{ url_for('providers.provider_detail', provider_id=0) }}"
          class="space-y-4">

      <input type="file"
             name="image_file"
             accept="image/*"
             required
             class="block w-full text-sm text-gray-800
                    file:mr-4 file:py-2 file:px-4
                    file:rounded file:border-0
                    file:text-sm file:font-semibold
                    file:bg-blue-50 file:text-blue-700
                    hover:file:bg-blue-100"/>

      <button type="submit"
              class="inline-flex items-center px-4 py-2
                     bg-blue-600 hover:bg-blue-700
                     text-white font-semibold rounded-lg">
        📤 Upload & Extract
      </button>
    </form>

    <!-- Processing status -->
    <div id="processingStatus" class="hidden mt-6 text-center">
      <div class="animate-spin inline-block w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full"></div>
      <p class="mt-2 text-gray-600">Processing image...</p>
    </div>

    <!-- Extraction results -->
    <div id="extractionResults" class="hidden mt-6">
      <h2 class="text-xl font-semibold mb-2">Extracted Text</h2>
      <div id="markdownContent" class="prose max-w-none bg-gray-50 border rounded p-4 overflow-x-auto">
      </div>
    </div>

    <div class="mt-8 pt-4 border-t">
      <a href="{{ url_for('providers.providers') }}"
         class="text-blue-600 hover:text-blue-800">
        ← Back to Provider List
      </a>
    </div>
  </div>
</div>
{% endblock %}


FILE: upload_provider/upload_provider_routes.py
----------------------------------------
from flask import Blueprint, render_template, request, flash, current_app
from werkzeug.utils import secure_filename

from .image_to_markdown_gpt import image_to_markdown  # local import
from .provider_to_facets import convert_and_save_provider_facets

upload_provider_bp = Blueprint(
    "upload_provider",
    __name__,
    template_folder="templates",
    static_folder="static",
    url_prefix="/upload"
)

@upload_provider_bp.get("/")
def upload():                                    # GET /upload/
    return render_template("upload_provider.html")

@upload_provider_bp.post("/process")
def process_image():
    uploaded_file = request.files.get("image_file")
    if not uploaded_file:
        return {"error": "No file provided"}, 400

    try:
        markdown = image_to_markdown(uploaded_file)
        return {"markdown": markdown}
    except Exception as err:
        return {"error": str(err)}, 500

@upload_provider_bp.post("/extract_provider_info/<int:provider_id>")
def extract_provider_info(provider_id):
    try:
        from .markdown_to_individual_provider_gpt import markdown_to_individual_provider_gpt
        success = markdown_to_individual_provider_gpt(provider_id)
        return {"success": success}
    except Exception as err:
        current_app.logger.error(f"Error extracting provider info: {str(err)}")
        return {"error": str(err)}, 500

@upload_provider_bp.post("/create_provider")
def create_provider():
    markdown_text = request.form.get("markdown_text")
    image_file = request.files.get("image_file")
    
    if not markdown_text:
        return {"error": "No markdown text provided"}, 400

    try:
        from .create_individual_provider_from_image import create_individual_provider_from_markdown
        
        provider = create_individual_provider_from_markdown(markdown_text, image_file)
        if not provider:
            current_app.logger.error("Provider creation returned None")
            return "Provider creation failed - no provider returned", 500
            
        current_app.logger.info(f"Provider created successfully with ID: {provider.provider_id}")
        return {"provider_id": provider.provider_id}
    except Exception as err:
        import traceback
        current_app.logger.error(f"Error creating provider: {str(err)}")
        current_app.logger.error(f"Traceback: {traceback.format_exc()}")
        return str(err), 500

@upload_provider_bp.post("/convert_to_facets/<int:provider_id>")
def convert_to_facets(provider_id):
    """Convert provider data to Facets JSON and generate markdown summary."""
    try:
        # First generate Facets JSON
        from .provider_to_facets import convert_and_save_provider_facets
        facets_result = convert_and_save_provider_facets(provider_id)
        
        if facets_result.get('status') != 'success':
            return {
                'success': False, 
                'error': 'Failed to generate Facets JSON',
                'details': facets_result.get('message')
            }

        # Then generate markdown if JSON was successful
        from .facets_json_to_markdown import convert_facets_json_to_markdown
        markdown_result = convert_facets_json_to_markdown(provider_id)
        
        if markdown_result.get('status') != 'success':
            return {
                'success': False,
                'error': 'Failed to generate Facets markdown',
                'details': markdown_result.get('message')
            }

        return {'success': True}

    except Exception as err:
        current_app.logger.error(f"Error converting to Facets: {str(err)}")
        return {'success': False, 'error': str(err)}

FILE: upload_provider/image_to_markdown_gpt.py
----------------------------------------

"""
Utility: convert an uploaded image (Werkzeug FileStorage) to
GitHub-flavoured Markdown using an OpenAI Vision model.

Environment:
  * OPENAI_API_KEY – already set in your container / host
"""

import base64
from typing import Union, IO
from openai import OpenAI

client = OpenAI()

def _encode_image(file_obj: Union[IO[bytes], "FileStorage"]) -> str:
    """
    Return a data-URL string (data:image/…;base64,...) that the
    Chat Completions endpoint accepts.
    """
    mime = getattr(file_obj, "mimetype", None) or "image/png"
    b64 = base64.b64encode(file_obj.read()).decode("utf-8")
    return f"data:{mime};base64,{b64}"

def image_to_markdown(file_storage, detail: str = "high") -> str:
    """
    Send the image to the model and return the Markdown transcription.
    """
    data_url = _encode_image(file_storage)

    tools = [{
        "type": "function",
        "function": {
            "name": "transcribe_image",
            "description": "Transcribe text from an image into GitHub-flavoured Markdown format",
            "parameters": {
                "type": "object",
                "properties": {
                    "markdown_text": {
                        "type": "string",
                        "description": "The markdown formatted text transcribed from the image"
                    }
                },
                "required": ["markdown_text"],
                "additionalProperties": False
            },
            "strict": True
        }
    }]

    response = client.chat.completions.create(
        model="gpt-4.1-mini",  # any vision-capable model is fine
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": (
                            "Transcribe every piece of text in this image, "
                            "re-create the layout in GitHub-flavoured Markdown. "
                            "Preserve tables, headings, and any obvious structure."
                        ),
                    },
                    {
                        "type": "image_url",
                        "image_url": {"url": data_url, "detail": detail},
                    },
                ],
            }
        ],
        tools=tools,
        tool_choice={"type": "function", "function": {"name": "transcribe_image"}}
    )

    # Extract markdown text from function call
    tool_call = response.choices[0].message.tool_calls[0]
    return tool_call.function.arguments.strip('{}"\n').replace('"markdown_text":', '')


FILE: upload_provider/create_individual_provider_from_image.py
----------------------------------------

from datetime import datetime
from models.db import db
from models.provider import IndividualProvider

def create_individual_provider_from_markdown(markdown_text: str, image_file) -> IndividualProvider:
    """
    Creates a new individual provider record from markdown text and image with placeholder values.
    Populates provider ID, markdown text, and image data with placeholder values for required fields.

    Args:
        markdown_text: The markdown text generated from the image
        image_file: The raw image file object from the form upload

    Returns:
        IndividualProvider: The newly created provider record
    """
    # Get next provider_id
    result = db.session.execute(db.text("SELECT nextval('individual_providers_provider_id_seq')"))
    next_id = result.scalar()

    # Create timestamp for the placeholder last name 
    current_time = datetime.now().strftime("%B %d, %Y at %I:%M %p")

    # Convert image to base64 for storage
    import base64
    image_bytes = None
    if image_file:
        image_bytes = base64.b64encode(image_file.read())

    # Create new provider with required placeholder values
    new_provider = IndividualProvider(
        npi="To be assigned",
        first_name="New Provider from Image",
        last_name=f"Created at {current_time}",
        provider_enrollment_form_markdown_text=markdown_text,
        provider_enrollment_form_image=image_bytes
    )

    # Add and commit to database
    db.session.add(new_provider)
    db.session.commit()

    return new_provider


FILE: main.py
----------------------------------------
from flask import Flask, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail
from flask_login import LoginManager
from itsdangerous import URLSafeTimedSerializer
import os

# Initialize extensions
db = SQLAlchemy()
mail = Mail()
login_mgr = LoginManager()

app = Flask(__name__)

# ────────────────────────────────────────────────────────────────
# Core configuration
# ────────────────────────────────────────────────────────────────
# Database
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ["DATABASE_URL"]
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    'pool_pre_ping': True,
    'pool_recycle': 300,  # Recycle connections every 5 minutes
    'pool_timeout': 30,   # Connection timeout of 30 seconds
    'pool_size': 10       # Maximum pool size
}

# Secrets ─── raise early if they're missing
try:
    app.config["FLASK_SECRET_KEY"] = os.environ["FLASK_SECRET_KEY"]
    app.config["SECURITY_TOKEN_SALT"] = os.environ["SECURITY_TOKEN_SALT"]
except KeyError as missing:
    raise ValueError(f"Required environment variable {missing} is not set")

# `app.secret_key` writes to app.config["SECRET_KEY"]; keep both for clarity
app.secret_key = app.config["FLASK_SECRET_KEY"]

# Mail (optional—but convenient to load here)
app.config["MAIL_SERVER"] = os.environ.get("MAIL_SERVER", "smtp.gmail.com")
app.config["MAIL_PORT"] = int(os.environ.get("MAIL_PORT", "587"))
app.config["MAIL_USE_TLS"] = os.environ.get("MAIL_USE_TLS", "true").lower() == "true"
app.config["MAIL_USERNAME"] = os.environ.get("MAIL_USERNAME")
app.config["MAIL_PASSWORD"] = os.environ.get("MAIL_PASSWORD")
app.config["MAIL_DEFAULT_SENDER"] = os.environ.get(
    "EMAILS_SENT_FROM", app.config["MAIL_USERNAME"]
)

# Initialize extensions with app
db.init_app(app)
mail.init_app(app)
login_mgr.init_app(app)

# Create URL safe serializer
ts = URLSafeTimedSerializer(
    secret_key=app.config["FLASK_SECRET_KEY"],
    salt=app.config["SECURITY_TOKEN_SALT"]
)

# ────────────────────────────────────────────────────────────────
# Blueprints & routes
# ────────────────────────────────────────────────────────────────
from providers.providers_routes import providers_bp
from auth import bp as auth_bp
from work_queues.work_queue_routes import wq_bp
from upload_provider.upload_provider_routes import upload_provider_bp

app.register_blueprint(auth_bp, url_prefix="/auth")
app.register_blueprint(providers_bp)
app.register_blueprint(wq_bp)
app.register_blueprint(upload_provider_bp)

@app.route("/")
def index():
    return redirect(url_for("upload_provider.upload"))

# ────────────────────────────────────────────────────────────────
# Entrypoint
# ────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

FILE: .replit
----------------------------------------
run =  ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]
entrypoint = "main.py"
modules = ["python-3.11", "postgresql-16"]

hidden = [".pythonlibs"]

[nix]
channel = "stable-24_05"

[deployment]
run =  ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 5000
externalPort = 80


