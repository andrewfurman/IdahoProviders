### FILE TREE (SELECTED)

├─ models
|  ├─ provider.py (43 lines)
|  ├─ work_queue.py (38 lines)
|  ├─ __init__.py (28 lines)
|  ├─ provider_audit.py (24 lines)
|  ├─ hospital.py (14 lines)
|  ├─ medical_group.py (14 lines)
|  ├─ REL_provider_group.py (13 lines)
|  ├─ auth.py (13 lines)
|  ├─ REL_group_network.py (12 lines)
|  ├─ REL_hospital_network.py (12 lines)
|  ├─ REL_group_hospital.py (11 lines)
|  └─ network.py (9 lines)
|  ├─ db.py (1 lines)
├─ work_queues
|  ├─ static
|  |  └─ work_queue.js (1 lines)
|  └─ templates
|     ├─ work_queue_item.html (119 lines)
|     └─ work_queue.html (90 lines)
|  ├─ work_queue_routes.py (56 lines)
├─ insert_sample_data.py (403 lines)
├─ create_tables.py (167 lines)
├─ main.py (78 lines)
├─ pyproject.toml (31 lines)
├─ .replit (17 lines)


### FILE CONTENTS

FILE: models/provider.py
----------------------------------------
from .db import db

class IndividualProvider(db.Model):
    __tablename__ = 'individual_providers'

    provider_id = db.Column(db.Integer, primary_key=True)
    npi = db.Column(db.Text, nullable=False)
    first_name = db.Column(db.Text, nullable=False)
    last_name = db.Column(db.Text, nullable=False)
    gender = db.Column(db.Text)
    phone = db.Column(db.Text)
    provider_type = db.Column(db.Text)
    accepting_new_patients = db.Column(db.Boolean)
    specialties = db.Column(db.Text)
    board_certifications = db.Column(db.Text)
    languages = db.Column(db.Text)
    address_line = db.Column(db.Text)
    city = db.Column(db.Text)
    state = db.Column(db.Text)
    zip = db.Column(db.Text)

    def to_dict(self):
        """
        Convert IndividualProvider object to dictionary
        Useful for JSON serialization
        """
        return {
            'provider_id': self.provider_id,
            'npi': self.npi,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'gender': self.gender,
            'phone': self.phone,
            'provider_type': self.provider_type,
            'accepting_new_patients': self.accepting_new_patients,
            'specialties': self.specialties,
            'board_certifications': self.board_certifications,
            'languages': self.languages,
            'address_line': self.address_line,
            'city': self.city,
            'state': self.state,
            'zip': self.zip
        }

FILE: models/work_queue.py
----------------------------------------

from .db import db
from datetime import datetime

class WorkQueueItem(db.Model):
    __tablename__ = "work_queue_items"

    queue_id = db.Column(db.Integer, primary_key=True)
    provider_id = db.Column(db.Integer,
                          db.ForeignKey("individual_providers.provider_id",
                                       ondelete="CASCADE"),
                          nullable=False)
    issue_type = db.Column(db.String(40), nullable=False)
    description = db.Column(db.Text, nullable=False)
    recommended_action = db.Column(db.Text)
    status = db.Column(db.String(20), default="open", nullable=False)
    assigned_user_id = db.Column(db.Integer,
                                db.ForeignKey("users.id",
                                             ondelete="SET NULL"))
    created_by_user_id = db.Column(db.Integer,
                                  db.ForeignKey("users.id",
                                              ondelete="SET NULL"))
    created_at = db.Column(db.DateTime,
                          nullable=False,
                          default=datetime.utcnow)
    updated_at = db.Column(db.DateTime,
                          nullable=False,
                          default=datetime.utcnow,
                          onupdate=datetime.utcnow)
    resolved_at = db.Column(db.DateTime)

    # relationships
    provider = db.relationship("IndividualProvider")
    assigned_user = db.relationship("User",
                                  foreign_keys=[assigned_user_id])
    created_by_user = db.relationship("User",
                                    foreign_keys=[created_by_user_id])


FILE: models/__init__.py
----------------------------------------

from .db import db
from .auth import User
from .provider import IndividualProvider
from .provider_audit import ProviderAudit
from .work_queue import WorkQueueItem
from .medical_group import MedicalGroup
from .hospital import Hospital 
from .network import Network
from .REL_provider_group import ProviderGroup
from .REL_group_hospital import GroupHospital
from .REL_hospital_network import HospitalNetwork
from .REL_group_network import GroupNetwork

__all__ = [
    'db',
    'User',
    'IndividualProvider',
    'ProviderAudit',
    'MedicalGroup',
    'Hospital',
    'Network',
    'ProviderGroup',
    'GroupHospital', 
    'HospitalNetwork',
    'GroupNetwork'
]


FILE: models/provider_audit.py
----------------------------------------

from .db import db
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class ProviderAudit(db.Model):
    """Audit log for provider changes"""
    __tablename__ = 'individual_provider_audit'
    
    audit_id = db.Column(db.Integer, primary_key=True)
    provider_id = db.Column(db.Integer, db.ForeignKey('individual_providers.provider_id', ondelete='CASCADE'))
    field_updated = db.Column(db.Text, nullable=False)
    old_value = db.Column(db.Text)
    new_value = db.Column(db.Text)
    change_description = db.Column(db.Text)
    edit_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id', ondelete='SET NULL'))

    # Relationships
    provider = db.relationship('IndividualProvider', backref=db.backref('audits', lazy='dynamic'))
    user = db.relationship('User', foreign_keys=[user_id])


FILE: models/hospital.py
----------------------------------------

from . import db

class Hospital(db.Model):
    __tablename__ = 'hospitals'
    
    hospital_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    ccn = db.Column(db.String)
    address_line = db.Column(db.String)
    city = db.Column(db.String)
    state = db.Column(db.String)
    zip = db.Column(db.String)


FILE: models/medical_group.py
----------------------------------------

from . import db

class MedicalGroup(db.Model):
    __tablename__ = 'medical_groups'
    
    group_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    tax_id = db.Column(db.String)
    address_line = db.Column(db.String)
    city = db.Column(db.String)
    state = db.Column(db.String)
    zip = db.Column(db.String)


FILE: models/REL_provider_group.py
----------------------------------------

from . import db

class ProviderGroup(db.Model):
    __tablename__ = 'individual_provider_medical_group'
    
    id = db.Column(db.Integer, primary_key=True)
    provider_id = db.Column(db.Integer, db.ForeignKey('individual_providers.provider_id'))
    group_id = db.Column(db.Integer, db.ForeignKey('medical_groups.group_id'))
    start_date = db.Column(db.Date)
    end_date = db.Column(db.Date)
    primary_flag = db.Column(db.Boolean)


FILE: models/auth.py
----------------------------------------

from main import db
from flask_login import UserMixin

class User(db.Model, UserMixin):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), unique=True, nullable=False)
    first_name = db.Column(db.String(120))
    last_name = db.Column(db.String(120))
    role = db.Column(db.String(50))


FILE: models/REL_group_network.py
----------------------------------------

from . import db

class GroupNetwork(db.Model):
    __tablename__ = 'medical_group_network'
    
    id = db.Column(db.Integer, primary_key=True)
    group_id = db.Column(db.Integer, db.ForeignKey('medical_groups.group_id'))
    network_id = db.Column(db.Integer, db.ForeignKey('networks.network_id'))
    effective_date = db.Column(db.Date)
    status = db.Column(db.String)


FILE: models/REL_hospital_network.py
----------------------------------------

from . import db

class HospitalNetwork(db.Model):
    __tablename__ = 'hospital_network'
    
    id = db.Column(db.Integer, primary_key=True)
    hospital_id = db.Column(db.Integer, db.ForeignKey('hospitals.hospital_id'))
    network_id = db.Column(db.Integer, db.ForeignKey('networks.network_id'))
    effective_date = db.Column(db.Date)
    status = db.Column(db.String)


FILE: models/REL_group_hospital.py
----------------------------------------

from . import db

class GroupHospital(db.Model):
    __tablename__ = 'medical_group_hospital'
    
    id = db.Column(db.Integer, primary_key=True)
    group_id = db.Column(db.Integer, db.ForeignKey('medical_groups.group_id'))
    hospital_id = db.Column(db.Integer, db.ForeignKey('hospitals.hospital_id'))
    privilege_type = db.Column(db.String)


FILE: models/network.py
----------------------------------------
# Models/network.py
from . import db

class Network(db.Model):
    __tablename__ = 'networks'
    
    network_id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.String, nullable=False)
    name = db.Column(db.String, nullable=False)

FILE: models/db.py
----------------------------------------
from main import db        # now no second instance!

FILE: work_queues/static/work_queue.js
----------------------------------------


FILE: work_queues/templates/work_queue_item.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8 px-5 max-w-7xl mx-auto">
  <nav class="mb-6">
    <a href="{{ url_for('work_queue.work_queue') }}" class="text-blue-600 hover:text-blue-800">← Back to Work Queue</a>
  </nav>

  <div class="bg-white shadow rounded-lg p-6">
    <!-- Header -->
    <div class="border-b pb-4 mb-6">
      <div class="flex justify-between items-start">
        <div>
          <h1 class="text-2xl font-bold mb-2">Work Item #{{ item.queue_id }}</h1>
          <p class="text-gray-600">Created {{ item.created_at.strftime('%Y-%m-%d %H:%M UTC') }}</p>
        </div>
        <div class="flex space-x-2">
          {% if not item.assigned_user or item.assigned_user.id != current_user.id %}
          <form method="POST" action="{{ url_for('work_queue.assign_to_me', queue_id=item.queue_id) }}">
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
              Assign to me
            </button>
          </form>
          {% endif %}
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Work Item Details -->
      <div>
        <h2 class="text-lg font-semibold mb-4">Issue Details</h2>
        <form method="POST" action="{{ url_for('work_queue.update_work_queue_item', queue_id=item.queue_id) }}" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700">Issue Type</label>
            <div class="mt-1 text-gray-900">{{ item.issue_type.replace('_', ' ').title() }}</div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Description</label>
            <div class="mt-1 text-gray-900">{{ item.description }}</div>
          </div>

          <div>
            <label for="recommended_action" class="block text-sm font-medium text-gray-700">Recommended Action</label>
            <textarea id="recommended_action" name="recommended_action" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">{{ item.recommended_action or '' }}</textarea>
          </div>

          <div>
            <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
            <select id="status" name="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
              <option value="open" {% if item.status == 'open' %}selected{% endif %}>Open</option>
              <option value="in_progress" {% if item.status == 'in_progress' %}selected{% endif %}>In Progress</option>
              <option value="resolved" {% if item.status == 'resolved' %}selected{% endif %}>Resolved</option>
            </select>
          </div>

          <div>
            <label for="assigned_user_id" class="block text-sm font-medium text-gray-700">Assigned To</label>
            <select id="assigned_user_id" name="assigned_user_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
              <option value="">— Unassigned —</option>
              {% for u in users %}
              <option value="{{ u.id }}" {% if item.assigned_user_id == u.id %}selected{% endif %}>
                {{ u.email }}
              </option>
              {% endfor %}
            </select>
          </div>

          <div class="pt-4">
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
              Update Work Item
            </button>
          </div>
        </form>
      </div>

      <!-- Provider Details -->
      <div>
        <h2 class="text-lg font-semibold mb-4">Provider Information</h2>
        <div class="bg-gray-50 p-4 rounded-lg">
          <div class="mb-4">
            <a href="{{ url_for('providers.provider_detail', provider_id=provider.provider_id) }}" 
               class="text-blue-600 hover:text-blue-800 text-lg font-medium">
              {{ provider.first_name }} {{ provider.last_name }}
            </a>
          </div>
          
          <dl class="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
            <div>
              <dt class="text-sm font-medium text-gray-500">NPI</dt>
              <dd class="mt-1 text-sm text-gray-900">{{ provider.npi or '—' }}</dd>
            </div>
            
            <div>
              <dt class="text-sm font-medium text-gray-500">Provider Type</dt>
              <dd class="mt-1 text-sm text-gray-900">{{ provider.provider_type or '—' }}</dd>
            </div>

            <div>
              <dt class="text-sm font-medium text-gray-500">Specialties</dt>
              <dd class="mt-1 text-sm text-gray-900">{{ provider.specialties or '—' }}</dd>
            </div>

            <div>
              <dt class="text-sm font-medium text-gray-500">Location</dt>
              <dd class="mt-1 text-sm text-gray-900">
                {{ provider.city }}, {{ provider.state }} {{ provider.zip }}
              </dd>
            </div>
          </dl>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}


FILE: work_queues/templates/work_queue.html
----------------------------------------

{% extends "header.html" %}

{% block content %}
<div class="py-8 px-5">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-2xl font-bold">Work Queue</h2>
    <div class="flex space-x-2">
      <select id="statusFilter" class="border rounded px-3 py-1">
        <option value="">All Statuses</option>
        <option value="open">Open</option>
        <option value="in_progress">In Progress</option>
        <option value="resolved">Resolved</option>
      </select>
    </div>
  </div>

  <div class="bg-white shadow rounded-lg overflow-hidden">
    <table class="min-w-full table-auto">
      <thead class="bg-gray-50">
        <tr class="text-xs font-medium text-gray-500 uppercase tracking-wider">
          <th class="px-6 py-3 text-left">Provider</th>
          <th class="px-6 py-3 text-left">Issue Type</th>
          <th class="px-6 py-3 text-left">Description</th>
          <th class="px-6 py-3 text-left">Status</th>
          <th class="px-6 py-3 text-left">Assigned To</th>
          <th class="px-6 py-3 text-left">Last Updated</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {% for item in items %}
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4">
            <a href="{{ url_for('work_queue.work_queue_item', queue_id=item.queue_id) }}" 
               class="text-blue-600 hover:text-blue-800 hover:underline">
              {{ item.provider.first_name }} {{ item.provider.last_name }}
            </a>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="text-sm">{{ item.issue_type.replace('_', ' ').title() }}</span>
          </td>
          <td class="px-6 py-4">
            <span class="text-sm text-gray-900">{{ item.description[:100] }}{% if item.description|length > 100 %}...{% endif %}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
              {% if item.status == 'open' %}bg-red-100 text-red-800
              {% elif item.status == 'in_progress' %}bg-yellow-100 text-yellow-800
              {% else %}bg-green-100 text-green-800{% endif %}">
              {{ item.status.replace('_', ' ').title() }}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {{ item.assigned_user.email if item.assigned_user else '—' }}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {{ item.updated_at.strftime('%Y-%m-%d %H:%M') }}
          </td>
        </tr>
        {% endfor %}
        {% if not items %}
        <tr>
          <td colspan="6" class="px-6 py-4 text-center text-gray-500">
            No work queue items found
          </td>
        </tr>
        {% endif %}
      </tbody>
    </table>
  </div>
</div>

<script>
document.getElementById('statusFilter').addEventListener('change', function(e) {
  const status = e.target.value;
  const rows = document.querySelectorAll('tbody tr');
  
  rows.forEach(row => {
    const statusCell = row.querySelector('td:nth-child(4)');
    if (!status || !statusCell) {
      row.style.display = '';
      return;
    }
    const statusText = statusCell.textContent.trim().toLowerCase();
    row.style.display = statusText.includes(status) ? '' : 'none';
  });
});
</script>
{% endblock %}


FILE: work_queues/work_queue_routes.py
----------------------------------------

from flask import Blueprint, render_template, request, redirect, url_for, flash, abort
from flask_login import login_required, current_user
from main import db
from models import WorkQueueItem, IndividualProvider, User

wq_bp = Blueprint("work_queue", __name__,
                  template_folder="templates",
                  static_folder="static")

@wq_bp.route("/work_queue")
@login_required
def work_queue():
    items = WorkQueueItem.query.order_by(
        WorkQueueItem.status.desc(),  # open first
        WorkQueueItem.updated_at.desc()
    ).all()
    return render_template("work_queue.html", items=items)

@wq_bp.route("/work_queue/<int:queue_id>")
@login_required
def work_queue_item(queue_id):
    item = WorkQueueItem.query.get_or_404(queue_id)
    provider = item.provider
    users = User.query.order_by(User.email).all()
    return render_template("work_queue_item.html",
                         item=item, provider=provider, users=users)

@wq_bp.route("/work_queue/<int:queue_id>/update", methods=['POST'])
@login_required
def update_work_queue_item(queue_id):
    item = WorkQueueItem.query.get_or_404(queue_id)

    # Update editable fields
    item.recommended_action = request.form.get("recommended_action", "").strip()
    item.status = request.form.get("status", item.status)
    item.assigned_user_id = request.form.get("assigned_user_id") or None

    if item.status == "resolved" and not item.resolved_at:
        from datetime import datetime
        item.resolved_at = datetime.utcnow()

    db.session.commit()
    flash("Work queue item updated", "success")
    return redirect(url_for("work_queue.work_queue_item", queue_id=queue_id))

@wq_bp.route("/work_queue/<int:queue_id>/assign_to_me", methods=['POST'])
@login_required
def assign_to_me(queue_id):
    item = WorkQueueItem.query.get_or_404(queue_id)
    item.assigned_user_id = current_user.id
    item.status = "in_progress"
    db.session.commit()
    flash("You are now assigned", "success")
    return redirect(url_for("work_queue.work_queue_item", queue_id=queue_id))


FILE: insert_sample_data.py
----------------------------------------
"""Insert or update Idaho hospitals and their network relationships.

This script assumes that all required network records already exist in the
`networks` table (you ran that migration previously).  It will **add new**
hospitals, **update** any that already exist (matched by `name`), and create
`HospitalNetwork` rows for every hospital‑network combination listed below.

Run with:
    python insert_sample_data.py
"""

import sqlalchemy as sa
from datetime import date

from main import db, app
from models.hospital import Hospital
from models.network import Network
from models.REL_hospital_network import HospitalNetwork

# ---------------------------------------------------------------------------
#  Data — each hospital entry includes the networks (by code) it participates in
# ---------------------------------------------------------------------------
HOSPITALS_DATA = [
    {
        "name": "Benewah Community Hospital",
        "address_line": "229 S 7th St",
        "city": "St. Maries",
        "state": "ID",
        "zip": "83861",
        "networks": ["HNPN"],
    },
    {
        "name": "Bonner General",
        "address_line": "520 N Third Ave",
        "city": "Sandpoint",
        "state": "ID",
        "zip": "83864",
        "networks": ["HNPN"],
    },
    {
        "name": "Boundary Community Hospital",
        "address_line": "6640 Kaniksu St",
        "city": "Bonners Ferry",
        "state": "ID",
        "zip": "83805",
        "networks": ["KCN", "HNPN"],
    },
    {
        "name": "Clearwater Valley Hospital",
        "address_line": "301 Cedar St",
        "city": "Orofino",
        "state": "ID",
        "zip": "83544",
        "networks": ["KCN", "HNPN", "CPN"],
    },
    {
        "name": "Gritman Medical Center",
        "address_line": "700 S Main St",
        "city": "Moscow",
        "state": "ID",
        "zip": "83843",
        "networks": ["HNPN", "CPN"],
    },
    {
        "name": "Kootenai Health",
        "address_line": "2003 Kootenai Health Way",
        "city": "Coeur d'Alene",
        "state": "ID",
        "zip": "83814",
        "networks": ["KCN", "HNPN"],
    },
    {
        "name": "Northern Idaho Advanced Care Hospital",
        "address_line": "600 N Cecil Rd",
        "city": "Post Falls",
        "state": "ID",
        "zip": "83854",
        "networks": ["HNPN"],
    },
    {
        "name": "Northwest Specialty Hospital",
        "address_line": "1593 E Polston Ave",
        "city": "Post Falls",
        "state": "ID",
        "zip": "83854",
        "networks": ["HNPN"],
    },
    {
        "name": "Shoshone Medical Center",
        "address_line": "25 Jacobs Gulch Rd",
        "city": "Kellogg",
        "state": "ID",
        "zip": "83837",
        "networks": ["HNPN"],
    },
    {
        "name": "St. Joseph Regional Medical Center",
        "address_line": "415 6th St",
        "city": "Lewiston",
        "state": "ID",
        "zip": "83501",
        "networks": ["HNPN", "CPN"],
    },
    {
        "name": "St. Mary's Hospital",
        "address_line": "701 Lewiston St",
        "city": "Cottonwood",
        "state": "ID",
        "zip": "83522",
        "networks": ["KCN", "HNPN", "CPN"],
    },
    {
        "name": "Syringa Hospital & Clinics",
        "address_line": "607 W Main St",
        "city": "Grangeville",
        "state": "ID",
        "zip": "83530",
        "networks": ["HNPN", "CPN"],
    },
    {
        "name": "Saint Alphonsus – Boise",
        "address_line": "1055 N Curtis Rd",
        "city": "Boise",
        "state": "ID",
        "zip": "83706",
        "networks": ["HSWPN", "IDID"],
    },
    {
        "name": "Saint Alphonsus – Eagle",
        "address_line": "323 E Riverside Dr",
        "city": "Eagle",
        "state": "ID",
        "zip": "83616",
        "networks": ["HSWPN", "IDID"],
    },
    {
        "name": "St. Luke’s Boise Medical Center",
        "address_line": "190 E Bannock St",
        "city": "Boise",
        "state": "ID",
        "zip": "83712",
        "networks": ["SLHP", "HSWPN"],
    },
    {
        "name": "St. Luke’s Nampa Medical Center",
        "address_line": "9850 W St. Luke's Dr",
        "city": "Nampa",
        "state": "ID",
        "zip": "83687",
        "networks": ["SLHP", "HSWPN"],
    },
    {
        "name": "St. Luke’s Wood River MC",
        "address_line": "100 Hospital Dr",
        "city": "Ketchum",
        "state": "ID",
        "zip": "83340",
        "networks": ["SLHP", "HSWPN"],
    },
    {
        "name": "St. Luke’s Magic Valley MC",
        "address_line": "801 Pole Line Rd W",
        "city": "Twin Falls",
        "state": "ID",
        "zip": "83301",
        "networks": ["SLHP", "HSWPN"],
    },
    {
        "name": "St. Luke’s McCall",
        "address_line": "1000 State St",
        "city": "McCall",
        "state": "ID",
        "zip": "83638",
        "networks": ["SLHP", "HSWPN"],
    },
    {
        "name": "Valor Health",
        "address_line": "1202 E Locust St",
        "city": "Emmett",
        "state": "ID",
        "zip": "83617",
        "networks": ["SLHP", "HSWPN", "IDID"],
    },
    {
        "name": "Bear Lake Memorial",
        "address_line": "164 S 5th St",
        "city": "Montpelier",
        "state": "ID",
        "zip": "83254",
        "networks": ["HEPN"],
    },
    {
        "name": "Bingham Memorial",
        "address_line": "98 Poplar St",
        "city": "Blackfoot",
        "state": "ID",
        "zip": "83221",
        "networks": ["MVN", "HEPN"],
    },
    {
        "name": "Caribou Medical Center",
        "address_line": "300 S 3rd W",
        "city": "Soda Springs",
        "state": "ID",
        "zip": "83276",
        "networks": ["HEPN", "PQA"],
    },
    {
        "name": "Cassia Regional Hospital",
        "address_line": "1501 Hiland Ave",
        "city": "Burley",
        "state": "ID",
        "zip": "83318",
        "networks": ["SLHP", "HSWPN", "HEPN"],
    },
    {
        "name": "Eastern Idaho Regional MC",
        "address_line": "3100 Channing Way",
        "city": "Idaho Falls",
        "state": "ID",
        "zip": "83404",
        "networks": ["HEPN"],
    },
    {
        "name": "Franklin County MC",
        "address_line": "44 N 1st E",
        "city": "Preston",
        "state": "ID",
        "zip": "83263",
        "networks": ["HEPN", "PQA"],
    },
    {
        "name": "Idaho Falls Community Hospital",
        "address_line": "2327 Coronado St",
        "city": "Idaho Falls",
        "state": "ID",
        "zip": "83404",
        "networks": ["MVN", "HEPN"],
    },
    {
        "name": "Lost Rivers District Hospital",
        "address_line": "551 Highland Dr",
        "city": "Arco",
        "state": "ID",
        "zip": "83213",
        "networks": ["HSWPN", "HEPN", "PQA"],
    },
    {
        "name": "Madison Memorial",
        "address_line": "450 E Main St",
        "city": "Rexburg",
        "state": "ID",
        "zip": "83440",
        "networks": ["MVN", "HEPN"],
    },
    {
        "name": "Minidoka Memorial",
        "address_line": "1224 8th St",
        "city": "Rupert",
        "state": "ID",
        "zip": "83350",
        "networks": ["SLHP", "HSWPN", "HEPN"],
    },
    {
        "name": "Mountain View Hospital",
        "address_line": "2325 Coronado St",
        "city": "Idaho Falls",
        "state": "ID",
        "zip": "83404",
        "networks": ["MVN", "HEPN"],
    },
    {
        "name": "Nell J Redfield Memorial",
        "address_line": "150 N 200 W",
        "city": "Malad City",
        "state": "ID",
        "zip": "83252",
        "networks": ["HSWPN", "HEPN", "PQA"],
    },
    {
        "name": "North Canyon Medical Center",
        "address_line": "267 N Canyon Dr",
        "city": "Gooding",
        "state": "ID",
        "zip": "83330",
        "networks": ["SLHP", "HSWPN", "HEPN"],
    },
    {
        "name": "Portneuf Medical Center",
        "address_line": "777 Hospital Way",
        "city": "Pocatello",
        "state": "ID",
        "zip": "83201",
        "networks": ["HEPN", "PQA"],
    },
    {
        "name": "Power County Hospital",
        "address_line": "510 Roosevelt Ave",
        "city": "American Falls",
        "state": "ID",
        "zip": "83211",
        "networks": ["HSWPN", "HEPN", "PQA"],
    },
    {
        "name": "Steele Memorial Medical Center",
        "address_line": "203 S Daisy St",
        "city": "Salmon",
        "state": "ID",
        "zip": "83467",
        "networks": ["SLHP", "HSWPN", "HEPN"],
    },
    {
        "name": "Teton Valley Hospital",
        "address_line": "120 E Howard Ave",
        "city": "Driggs",
        "state": "ID",
        "zip": "83422",
        "networks": ["HEPN"],
    },
]

# ---------------------------------------------------------------------------
#  Helper functions
# ---------------------------------------------------------------------------

def sync_pk_sequence(table_name: str, pk_column: str) -> None:
    """Ensure the Postgres sequence for *table_name.pk_column* is >= MAX(pk)."""
    max_id = db.session.query(sa.func.max(getattr(db.Model.metadata.tables[table_name].c, pk_column))).scalar() or 0
    db.session.execute(
        sa.text(
            "SELECT setval(pg_get_serial_sequence(:tbl,:col), :next_val, false)"
        ),
        {"tbl": table_name, "col": pk_column, "next_val": max_id + 1},
    )


def insert_or_update_hospitals() -> None:
    """Insert or update hospitals and create HospitalNetwork relationships."""
    try:
        sync_pk_sequence("hospitals", "hospital_id")
        sync_pk_sequence("hospital_network", "id")

        added, updated, rel_added = 0, 0, 0

        for entry in HOSPITALS_DATA:
            networks_codes = entry["networks"]
            hospital_attrs = {k: v for k, v in entry.items() if k != "networks"}

            hospital = Hospital.query.filter_by(name=hospital_attrs["name"]).first()
            if hospital:
                # Update address fields if they changed
                for col, val in hospital_attrs.items():
                    if getattr(hospital, col) != val:
                        setattr(hospital, col, val)
                updated += 1
            else:
                hospital = Hospital(**hospital_attrs)
                db.session.add(hospital)
                added += 1

            # Flush so hospital_id is available for relationships
            db.session.flush()

            for code in networks_codes:
                network = Network.query.filter_by(code=code).first()
                if not network:
                    print(f"⚠️  Network '{code}' not found — skipped")
                    continue

                rel_exists = HospitalNetwork.query.filter_by(
                    hospital_id=hospital.hospital_id,
                    network_id=network.network_id,
                ).first()

                if not rel_exists:
                    db.session.add(
                        HospitalNetwork(
                            hospital_id=hospital.hospital_id,
                            network_id=network.network_id,
                            effective_date=date.today(),
                            status="Active",
                        )
                    )
                    rel_added += 1

        db.session.commit()
        print(
            f"✓ Hospitals — {added} added, {updated} updated • "
            f"Relationships — {rel_added} added"
        )

    except Exception as exc:
        db.session.rollback()
        print(f"⚠️  Error inserting hospitals: {exc}")


# ---------------------------------------------------------------------------
#  Entry‑point
# ---------------------------------------------------------------------------
if __name__ == "__main__":
    with app.app_context():
        insert_or_update_hospitals()


FILE: create_tables.py
----------------------------------------

import os
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def create_tables():
    database_url = os.environ['DATABASE_URL']
    
    conn = psycopg2.connect(database_url)
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    cur = conn.cursor()
    
    try:
        # Create users table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                first_name VARCHAR(120),
                last_name VARCHAR(120),
                role VARCHAR(50)
            )
        """)
        
        # Create core tables
        cur.execute("""
            CREATE TABLE IF NOT EXISTS individual_providers (
                provider_id SERIAL PRIMARY KEY,
                npi TEXT NOT NULL,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                gender TEXT,
                phone TEXT,
                provider_type TEXT,
                accepting_new_patients BOOLEAN,
                specialties TEXT,
                board_certifications TEXT,
                languages TEXT,
                address_line TEXT,
                city TEXT,
                state TEXT,
                zip TEXT
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS individual_provider_audit (
                audit_id SERIAL PRIMARY KEY,
                provider_id INTEGER,
                field_updated TEXT NOT NULL,
                old_value TEXT,
                new_value TEXT,
                change_description TEXT,
                edit_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                user_id INTEGER,
                FOREIGN KEY (provider_id) REFERENCES individual_providers(provider_id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS medical_groups (
                group_id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                tax_id TEXT,
                address_line TEXT,
                city TEXT,
                state TEXT,
                zip TEXT
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS hospitals (
                hospital_id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                ccn TEXT,
                address_line TEXT,
                city TEXT,
                state TEXT,
                zip TEXT
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS networks (
                network_id SERIAL PRIMARY KEY,
                code TEXT NOT NULL,
                name TEXT NOT NULL
            )
        """)
        
        # Create relationship tables
        cur.execute("""
            CREATE TABLE IF NOT EXISTS individual_provider_medical_group (
                id SERIAL PRIMARY KEY,
                provider_id INTEGER REFERENCES individual_providers(provider_id),
                group_id INTEGER REFERENCES medical_groups(group_id),
                start_date DATE,
                end_date DATE,
                primary_flag BOOLEAN,
                UNIQUE(provider_id, group_id)
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS medical_group_hospital (
                id SERIAL PRIMARY KEY,
                group_id INTEGER REFERENCES medical_groups(group_id),
                hospital_id INTEGER REFERENCES hospitals(hospital_id),
                privilege_type TEXT,
                UNIQUE(group_id, hospital_id)
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS hospital_network (
                id SERIAL PRIMARY KEY,
                hospital_id INTEGER REFERENCES hospitals(hospital_id),
                network_id INTEGER REFERENCES networks(network_id),
                effective_date DATE,
                status TEXT,
                UNIQUE(hospital_id, network_id)
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS medical_group_network (
                id SERIAL PRIMARY KEY,
                group_id INTEGER REFERENCES medical_groups(group_id),
                network_id INTEGER REFERENCES networks(network_id),
                effective_date DATE,
                status TEXT,
                UNIQUE(group_id, network_id)
            )
        """)

        # Create work queue table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS work_queue_items (
                queue_id SERIAL PRIMARY KEY,
                provider_id INTEGER NOT NULL
                    REFERENCES individual_providers(provider_id) ON DELETE CASCADE,
                issue_type VARCHAR(40) NOT NULL,
                description TEXT NOT NULL,
                recommended_action TEXT,
                status VARCHAR(20) NOT NULL DEFAULT 'open',
                assigned_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                resolved_at TIMESTAMP
            )
        """)
        
        print("All tables created successfully!")
        
    except Exception as e:
        print(f"An error occurred: {e}")
        
    finally:
        cur.close()
        conn.close()

if __name__ == "__main__":
    create_tables()


FILE: main.py
----------------------------------------
from flask import Flask, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail
from flask_login import LoginManager
from itsdangerous import URLSafeTimedSerializer
import os

# Initialize extensions
db = SQLAlchemy()
mail = Mail()
login_mgr = LoginManager()

app = Flask(__name__)

# ────────────────────────────────────────────────────────────────
# Core configuration
# ────────────────────────────────────────────────────────────────
# Database
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ["DATABASE_URL"]
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    'pool_pre_ping': True,
    'pool_recycle': 300,  # Recycle connections every 5 minutes
    'pool_timeout': 30,   # Connection timeout of 30 seconds
    'pool_size': 10       # Maximum pool size
}

# Secrets ─── raise early if they're missing
try:
    app.config["FLASK_SECRET_KEY"] = os.environ["FLASK_SECRET_KEY"]
    app.config["SECURITY_TOKEN_SALT"] = os.environ["SECURITY_TOKEN_SALT"]
except KeyError as missing:
    raise ValueError(f"Required environment variable {missing} is not set")

# `app.secret_key` writes to app.config["SECRET_KEY"]; keep both for clarity
app.secret_key = app.config["FLASK_SECRET_KEY"]

# Mail (optional—but convenient to load here)
app.config["MAIL_SERVER"] = os.environ.get("MAIL_SERVER", "smtp.gmail.com")
app.config["MAIL_PORT"] = int(os.environ.get("MAIL_PORT", "587"))
app.config["MAIL_USE_TLS"] = os.environ.get("MAIL_USE_TLS", "true").lower() == "true"
app.config["MAIL_USERNAME"] = os.environ.get("MAIL_USERNAME")
app.config["MAIL_PASSWORD"] = os.environ.get("MAIL_PASSWORD")
app.config["MAIL_DEFAULT_SENDER"] = os.environ.get(
    "EMAILS_SENT_FROM", app.config["MAIL_USERNAME"]
)

# Initialize extensions with app
db.init_app(app)
mail.init_app(app)
login_mgr.init_app(app)

# Create URL safe serializer
ts = URLSafeTimedSerializer(
    secret_key=app.config["FLASK_SECRET_KEY"],
    salt=app.config["SECURITY_TOKEN_SALT"]
)

# ────────────────────────────────────────────────────────────────
# Blueprints & routes
# ────────────────────────────────────────────────────────────────
from providers.providers_routes import providers_bp
from auth import bp as auth_bp
from work_queues.work_queue_routes import wq_bp

app.register_blueprint(auth_bp, url_prefix="/auth")
app.register_blueprint(providers_bp)
app.register_blueprint(wq_bp)

@app.route("/")
def index():
    return redirect(url_for("providers.providers"))

# ────────────────────────────────────────────────────────────────
# Entrypoint
# ────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

FILE: pyproject.toml
----------------------------------------
[tool.poetry]
name = "python-template"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = ">=3.11.0,<3.12"
flask = "^3.0.0"
gunicorn = "^21.2.0"
networks = "^0.3.7"
psycopg2-binary = "^2.9.10"
flask-sqlalchemy = "^3.1.1"
flask-mail = "^0.10.0"
flask-login = "^0.6.3"
itsdangerous = "^2.2.0"
sqlalchemy = "^2.0.40"

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
useLibraryCodeForTypes = true
exclude = [".cache"]

[tool.ruff]
# https://beta.ruff.rs/docs/configuration/
select = ['E', 'W', 'F', 'I', 'B', 'C4', 'ARG', 'SIM']
ignore = ['W291', 'W292', 'W293']

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

FILE: .replit
----------------------------------------
run =  ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]
entrypoint = "main.py"
modules = ["python-3.11", "postgresql-16"]

hidden = [".pythonlibs"]

[nix]
channel = "stable-24_05"

[deployment]
run =  ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 5000
externalPort = 80


